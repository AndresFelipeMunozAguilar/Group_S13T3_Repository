// Copyright 2012 Mark Armbrust. Permission granted for educational use.

/** Random.jack -- A not so random PRNG. */

class Random {

    static int seed;
    static int x;


    function void setSeed(int newSeed) {
        let seed = newSeed;
        return;
    }

    function int rand() {
        /** return a random number in the range 0..32767 */
        let seed = seed + 20251;
        if (seed < 0) {
            let seed = seed - 32767 - 1;
        }
        return seed;
    }

    function int randRange(int range) {
        /** return a random number in the range 0..range */
        var int mask;
        var int ret;
        let mask = 1;
        while (mask < range) {
            let mask = mask * 2 + 1;
        }
        let ret = Random.rand() & mask;
        while (ret > range) {
            let ret = Random.rand() & mask;
        }
        return ret;
    }




	/** Sets a new seed mod 16. */
	function void seed(int seed) {
		let x = Math.mod(seed, 16);
		return;
	}

	/** Returns the next random number. Can be negative or positive. */
	function int next() {
		let x = 7919 + (17*x);
		return x;
	}

	/** Returns a random value between x (inclusive) and y (non-inclusive)
	 *  y must be greater than x. */
	function int between(int x, int y) {
		var int diff, res;
		let diff = y - x + 1;
		let res = Math.mod(Random.next(), diff) + x;
		if (res = y) { let res = res - 1; }
		return res * 16;
	}

}